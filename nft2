Creating an NFT (Non-Fungible Token) and an ERC20 token are two different processes. NFTs are unique digital assets, while ERC20 tokens are fungible tokens that can be exchanged on the Ethereum blockchain. 

If you want to create an ERC20 token with a supply of 100,000, you can follow these steps:

1. Set up a development environment: Install Node.js and a code editor like Visual Studio Code.

2. Initialize a new project: Open your terminal and navigate to the desired directory. Run the following commands:
mkdir my-token
cd my-token
npm init -y


3. Install the required dependencies: Run the following command to install the OpenZeppelin library, which provides pre-built contracts for ERC20 tokens:
npm install @openzeppelin/contracts


4. Create a new file called MyToken.sol and add the following code to define your ERC20 token:
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract MyToken is ERC20 {
    constructor() ERC20("MyToken", "MTK") {
        _mint(msg.sender, 100000 * 10 ** decimals());
    }
}


5. Compile and deploy the contract: You can use tools like Truffle or Hardhat to compile and deploy your contract to the Ethereum network. Here's an example using Hardhat:

- Install Hardhat globally (if not already installed):
npm install -g hardhat


- Create a new file called hardhat.config.js and add the following code:
module.exports = {
  solidity: "0.8.0",
  networks: {
    hardhat: {
      chainId: 1337
    }
  }
};


- Run the following command to compile the contract:
npx hardhat compile


6. Deploy the contract: You can deploy the contract to a local development network or a public Ethereum network. Here's an example of deploying to a local development network using Hardhat:

- Create a new file called deploy.js and add the following code:
async function main() {
  const MyToken = await ethers.getContractFactory("MyToken");
  const myToken = await MyToken.deploy();

  console.log("Contract deployed to address:", myToken.address);
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });


- Run the following command to deploy the contract:
npx hardhat run deploy.js --network hardhat


After successfully deploying the contract, you will receive the contract address. This address represents your ERC20 token on the Ethereum blockchain.

Please note that deploying a token on the Ethereum mainnet or any public network requires understanding gas fees and other considerations. This example is for educational purposes and should not be used for production deployments without proper security audits and testing.
